import base64
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.fernet import Fernet


passfu = "global@key2022"
password = passfu.encode()

mysalt = b'\xc2\xddV\xe3P\n\x9a\x80\x12\x0e\xb1\xbd4Q\r\x14\xedH\x0b\xff+}b\xc4<\xf2N\xb3\x99\xec`\tr\xde\xd0!\xb9ov+T\xdf\xf8\xff\x0f\x8eh\r|N!\xd2\x9d\xb1WJT\xc1o\x1d\xc5\xf5%\xfa[\xb8\xb1\xf4\xf9\x97Y\x90\x7fK\xd1[i\xc23\x07\xbd\x0c\x95\xb2\n\x02\xd0{[\xd6\xc1\xb6\x92N\x10\\\xd6\xf4\x1eT\xe78m"\xda\xa9\x91T\xd5\x9cu\xc62c\x12\xd5T\x88\xe5Oek\xa0}CE\xf4\xc1\xb5\x8d\xb4\xd4\xe3\xcf\xe7\xccTj\x04S\xb80\xbb\xc4\xd2\xca\xc6X\xb2\x82\x82d\x13\xbf\xc8X\xb4yc\xf2\xac]\x10\x00\x04U\xffz\xf8\x03\x85\xc4L\x1e\x10}D/\x00\xdb\x9e\xeaJ\n\xae\xea\xd2t+\xee\xacd\xd9(-@\x7f\x91\xa1\x9e\x1bO{\x07Z\x0f\x86LJ\x90\xb1i \x91Q\xd8\x98\xfb=\xcd\r\xcb\x06\xe8\x88\xf7c\xae\xd5%\xffN\xb6\xbaj\xe3\x04\xefBV\r\xd2\xd6\xf8\xbde\xcd`\xd8|\x15l\xc01\xa8\xf8\xa2PS9\r\x12\x82g\xfd\xdf\t\xbc\xda\x02\x93S\xd8\xcav\xa2\x96\x8c\x12\xed\xb1J\xc3\xf0\x10\xb3B\xef0\x83v\xf5\xf7.\xa9w\x8cQj\x822\x16\xe6&V9\xea\x99\xb0\x05\x7f6i\xde\x8d\xf2\x17*\x1a[\x1b\x93\x94\x8dqtS\x05\x04\xa3j\xee\x9d\xdab\xd8%\x1c4r<c+{\x88%[\xdcZE\xf1\xa4\xbaU\xa3,\xaf"\x813\x99\xbeg\xe3\xc9\x9b\x1e(\xf0Iq\xf4h>\xb2{(R\x077\xb0\xa9\xb9If7\xb1\xa4|\xf6b\xa1\xbeW\xfeu\xd4\xa3F\xb6\xa1\x96\\\x92\x81H\xf7\x956\xf3\x93\xa1\x9bxq\xe6\x07\xe1\x95\xa5f,<\xc0\xb3\xe4\xacG\xd9T$\xfd%Z\xf0\x1a\x8f\x84L\x1a9\x98\xdb\xa2v}"v\xfa\xd6\xdad\xe9\xc3,\x97\x1a\xe5\xc6\x81\xbf\xdf(\xf0M\x94\x02\xc5\xec\xc5\x1f\xc6\xc9%\xcf|^b>\x0f\xfc?`\x95\xe8\xdf\x0f8\x99\x8e\x8ap6\xe1\xdd\xb7\x9bq\xa9\xa9\xc7]\xc3p\xe8\xee\x18\x93M;-i'
kdf = PBKDF2HMAC(
    algorithm=hashes.SHA512,
    length=32,
    salt=mysalt,
    iterations=10000,
    backend=default_backend()
)

key = kdf.derive(password)
print(key)

